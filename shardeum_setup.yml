- name: Install 
  vars_files: 
    - vars/vars.yml
  hosts: "{{ host }}"
  gather_facts: yes
  become: yes    
  
  tasks:

      - name: Check if Docker and Docker Compose are installed
        include_tasks: "playbooks/check_docker.yml"

    
      - name: Remove old container if exists
        community.docker.docker_container:
          name: "{{ container_name }}"
          state: absent

      - name: Remove an old volume if exists
        community.docker.docker_volume:
          name: "{{ volume_name }}"
          state: absent


      - name: Create a docker network
        docker_network:
          name: "{{ network_name }}"

      - name: Git checkout
        ansible.builtin.git:
          repo: '{{ git_url }}'
          dest: "{{ git_dst }}"
          force: true
          
      - name: Build image and with build args
        community.docker.docker_image:
          name: "{{ image_name }}"
          tag: "{{ image_tag }}"
          state: present
          force_absent: true
          build:
            nocache: true
            pull: true
            path: "{{ git_dst }}"
            dockerfile: "{{ dockerfile_name }}"
            args:
              RUNDASHBOARD: "y"
          source: build


      - name: Start the container 
        community.docker.docker_container:
          name: "{{ container_name }}"
          image: "{{ image_name }}:{{ image_tag }}"
          labels: 
            version: "{{ shardeum_version }}"
          pull: false
          detach: yes
          restart_policy: unless-stopped
          networks: 
            - name: "{{ network_name }}"
          env: "{{ env_vars }}"
          ports: "{{ ports_list }}"
          # volumes: 
          #   - "{{ volume_name }}:{{ container_mount_point }}"
          # cpus: "{{ cpus }}"
          # cpu_shares: "{{ cpu_shares }}"
          # memory: "{{ memory }}"
          # memory_reservation: "{{ memory_reservation }}"   
          # command: ["/root/massa/massa-node/massa-node", "-p", "mypassword"]


      - name: Start node
        community.docker.docker_container_exec: 
          container: "{{ container_name }}"
          command: sh -c "operator-cli start"
        register: out_start
        failed_when: result.rc != 0
        until: result.rc == 0
        retries: 6
        delay: 10

      - name: Get node status
        community.docker.docker_container_exec: 
          container: "{{ container_name }}"
          command: sh -c "operator-cli status"
        register: out_status

      - name: Print cli status output
        debug:
          msg: "{{ out_status.stdout_lines[0] }}"

      
      - name: Start GUI
        community.docker.docker_container_exec: 
          container: "{{ container_name }}"
          command: sh -c "operator-cli gui start"
        register: out_gui

      - name: Print GUI start output
        debug:
          msg: "{{ out_gui }}"  





     